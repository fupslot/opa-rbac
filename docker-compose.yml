version: '2'
services:
  gateway:
    container_name: gateway
    image: kong/kong-gateway:2.6.0.2-alpine
    volumes:
      - ./gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stdout
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002/
    ports:
      - 8000:8000
      - 8443:8443
      # Admin API Port: 8001
      # https://docs.konghq.com/gateway/2.6.x/admin-api
      - 8001:8001
      - 8444:8444
      - 8002:8002
      - 8445:8445
    healthcheck:
      test: ["CMD","kong","health"]
      interval: 10s
      timeout: 3s
      retries: 60
    depends_on:
      - authorizer 
    
  opa:
    container_name: opa
    image: openpolicyagent/opa:0.35.0-rootless
    ports:
      - 8181:8181
    volumes:
      - ./opa/config.yml:/config.yml
    # WARNING: OPA is NOT running with an authorization policy configured. This
    # means that clients can read and write policies in OPA. If you are
    # deploying OPA in an insecure environment, be sure to configure
    # authentication and authorization on the daemon. See the Security page for
    # details: https://www.openpolicyagent.org/docs/security.html.
    command:
      - "run"
      - "--server"
      - "-c"
      - "/config.yml"
      - "--log-format=json-pretty"
    depends_on:
      - bundle_server
  authorizer:
    container_name: authorizer
    build: 
      context: ./node-authorizer
      dockerfile: Dockerfile.dev
    init: true
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /app/node_modules
      - ./node-authorizer/index.js:/app/index.js
    environment:
      - OPA_ENDPOINT=http://opa:8181/v1/data/rbac/allow
  bundle_server:
    container_name: nginx
    image: nginx:1.20.0-alpine
    ports:
      - 8080:8080
      - 8888:80
    volumes:
      - ./node-authorizer/nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./node-authorizer/nginx/authorizer.conf:/etc/nginx/conf.d/authorizer.conf
      - ./bundles:/usr/share/nginx/html/bundles
    depends_on:
      - authorizer
  rtdb:
    container_name: rtdb
    image: rethinkdb:2.4.1
    ports:
    - "8081:8080"
    - "28015:28015"
  # postgresql:
  #   image: postgres
  #   environment:
  #     - POSTGRES_PASSWORD=
  #     - POSTGRES_DB=cache
  #   healthcheck:
  #     test: ["CMD", "pg_isready"]
  #     interval: 1s
  #     timeout: 3s
  #     retries: 30
  # redis:
  #   image: redis
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 1s
  #     timeout: 3s
  #     retries: 30